Notas sobre vtcl (Visual Tcl).
Rildo Pragana - Mar 9, 2010
==============================

variáveis globais:
------------------
widgetSelect (1 if true)
vTcl(w,widget) - widget selecionado
vTcl(w,options) - options e respectivos valores
vTcl(w,optlist) - lista de options válidas para esse widget

vTcl(w,manager) - geometry manager for this widget
vTcl(w,$mgr,*) - options for geometry management, 
	where $mgr is the variable above.



procs:
------
vTcl:save_tree <toplevel>  - devolve source da árvore de widgets
	(não deve haver nenhum widget selecionado, com "retângulos" visíveis)
vTcl:list_widget_tree <toplevel> - retorna lista dos widgets filhos
vTcl:dump_top <toplevel> - devolve src do toplevel e descendentes
vTcl::widgets::core::toplevel::dumpTop <toplevel> - same as above
vTcl:dump:widgets <toplevel> - devolve src dos widgets (children)

vTcl:prop:save_opt: w=.top43.but43 opt=-activebackground 
	varName=vTcl(w,opt,-activebackground)

### Modificando atributos de um widget (selecionado)
proc vTcl:prop:config_cmd {target option variable value args}
Exemplo:
vTcl:prop:config_cmd $vTcl(w,widget) -background \
	vTcl(w,opt,-background) cadetblue
		(do not need to add "args" here)

#proc vTcl:prop:save_opt_value {w opt value}
#proc vTcl:prop:save_opt {w opt varName} 

** options da geometria (binding):
vTcl:prop:choice_select .vTcl.ae.sw.c.f3.f._pack.t-anchor vTcl(w,pack,-anchor)
vTcl:prop:geom_config_mgr $vTcl(w,widget) -anchor vTcl(w,pack,-anchor) {} pack
** exemplos:
vTcl:prop:geom_config_mgr: target=.top43.fra66.but67 option=-anchor \
	variable=vTcl(w,pack,-anchor) value= args=pack
vTcl:prop:geom_config_mgr: target=.top43.fra66.but67 option=-anchor \
	variable=vTcl(w,pack,-anchor) value= args=pack

### Modificando geometria (widget selecionado):
set vTcl(w,place,-x) 30  ;# precisa modificar valor primeiro
vTcl:prop:geom_config_mgr $vTcl(w,widget) -x vTcl(w,place,-x) {} place


bindtags:
---------
A maioria dos widgets têm bindtags "vTcl(b)", alguns têm "vTcl(c)"
e outros tags, mas "vTcl(b)" é o tag mais importante.

bind vTcl(b):
<Alt-Key-h> - toggle handles (retângulos)
<Shift-Key-Right> <Shift-Key-Left> <Shift-Key-Down> <Shift-Key-Up> - resize
<Key-Right> <Key-Left> <Key-Down> <Key-Up> - move
<ButtonRelease-2> <ButtonRelease-1> 
<Control-B1-Motion> 
<B2-Motion> <B1-Motion> <Control-Button-1> <Button-2> 
<Button-1> <Double-Button-1> <Button-3> <Alt-Key-c> 
<Alt-Key-w> <Alt-Key-b> <Alt-Key-e> <Alt-Key-t> <Alt-Key-o> 
<Alt-Key-f> <Alt-Key-a> <Key-Delete> <Control-Key-h> 
<Control-Key-w> <Control-Key-s> <Control-Key-o> <Control-Key-n> 
<Control-Key-q> <Control-Key-v> <Control-Key-c> <Control-Key-x> 
<Control-Key-r> <Control-Key-z>




MISC CODE
---------

proc vTcl:define_bindings {} {
    global vTcl
    vTcl:status "creating bindings"

    foreach i {a b} {
        bind vTcl($i) <Control-z>  { vTcl:pop_action }
        bind vTcl($i) <Control-r>  { vTcl:redo_action }
        bind vTcl($i) <Control-x>  { vTcl:cut %W }
        bind vTcl($i) <Control-c>  { vTcl:copy %W }
        bind vTcl($i) <Control-v>  { vTcl:paste {} %W }
        bind vTcl($i) <Control-q>  { vTcl:quit }
        bind vTcl($i) <Control-n>  { vTcl:new }
        bind vTcl($i) <Control-o>  { vTcl:open }
        bind vTcl($i) <Control-s>  { vTcl:save }
        bind vTcl($i) <Control-w>  { vTcl:close }
	bind vTcl($i) <Control-h>  { vTcl:hide }
        bind vTcl($i) <Key-Delete> { vTcl:delete %W $vTcl(w,widget) }
        bind vTcl($i) <Alt-a>      { vTcl:set_alias $vTcl(w,widget) }
        bind vTcl($i) <Alt-f>      { vTcl:proclist:show flip }
        bind vTcl($i) <Alt-o>      { vTcl:toplist:show flip }
        bind vTcl($i) <Alt-t>      { vTcl:setup_unbind_tree . }
        bind vTcl($i) <Alt-e>      { vTcl:setup_bind_tree . }
        bind vTcl($i) <Alt-b>      { vTcl:show_bindings }
        bind vTcl($i) <Alt-w>      { vTcl:show_wtree }
        bind vTcl($i) <Alt-c>      { vTcl:name_compound $vTcl(w,widget) }
	    	
    }

    bind vTcl(c) <Configure>  {
        if {$vTcl(w,widget) == "%W"} {
            vTcl:update_widget_info %W
        }

        after idle "vTcl:place_handles \"$vTcl(w,widget)\""
    }

    bind Text <Control-Key-c> {tk_textCopy %W}
    bind Text <Control-Key-x> {tk_textCut %W}
    bind Text <Control-Key-v> {tk_textPaste %W}
    bind Text <Key-Tab>       {
        tkTextInsert %W $vTcl(tab)
        focus %W
        break
    }
    #
    # handles auto-indent and syntax coloring
    #
    bind Text <Key-Return>    {

        # exclude user inserted text widgets from vTcl bindings
        if {(! [string match .vTcl* %W]) ||
            [info exists %W.nosyntax] } {
            tkTextInsert %W "\n"
            focus %W
            break
        }

    	vTcl:syntax_color %W
        set pos [%W index "insert linestart"]
        # change by Nelson 3.9.2003: better auto indent
        set nos [%W search -regexp "\[^#\ \]|$" $pos]
        # set nos [%W search -regexp -nocase "\[a-z0-9\]" $pos]
        if {$nos != ""} {
            set ct [%W get $pos $nos]
            tkTextInsert %W "\n${ct}"
            focus %W
            break
        } else {
            tkTextInsert %W "\n"
            focus %W
            break
        }
    }
    bind Text <KeyRelease>   {

        # exclude user inserted text widgets from vTcl bindings
        if {(! [string match .vTcl* %W]) ||
            [info exists %W.nosyntax]  } {
            break
        }

	if {"%K"=="Up" ||
            "%K"=="Down" ||
            "%K"=="Right" ||
            "%K"=="Left"||
            "%K"=="space"||
            "%K"=="End"||
            "%K"=="Home"||
            [regexp {[]\")\}]} %A]} {

		scan [%W index insert] %%d pos

		vTcl:syntax_color %W $pos $pos
		focus %W
		break
	}
    }

    bind vTcl(b) <Button-3>          {vTcl:right_click %W %X %Y %x %y}
    bind vTcl(b) <Double-Button-1>   {vTcl:widget_dblclick %W %X %Y %x %y}
    bind vTcl(b) <Button-1>          {vTcl:bind_button_1 %W %X %Y %x %y}
    bind vTcl(b) <Button-2>          {vTcl:bind_button_2 %W %X %Y %x %y}
    bind vTcl(b) <Control-Button-1>  {vTcl:bind_button_2 %W %X %Y %x %y}
    bind vTcl(b) <B1-Motion>         {vTcl:bind_motion %W %X %Y}
    bind vTcl(b) <B2-Motion>         {vTcl:bind_motion %W %X %Y}
    bind vTcl(b) <Control-B1-Motion> {vTcl:bind_motion %W %X %Y}
    bind vTcl(b) <ButtonRelease-1>   {vTcl:bind_release %W %X %Y %x %y}
    bind vTcl(b) <ButtonRelease-2>   {vTcl:bind_release %W %X %Y %x %y}

    bind vTcl(b) <Up> {
        vTcl:widget_delta $vTcl(w,widget) 0 -$vTcl(key,y) 0 0
    }

    bind vTcl(b) <Down> {
        vTcl:widget_delta $vTcl(w,widget) 0 $vTcl(key,y) 0 0
    }

    bind vTcl(b) <Left> {
        vTcl:widget_delta $vTcl(w,widget) -$vTcl(key,x) 0 0 0
    }

    bind vTcl(b) <Right> {
        vTcl:widget_delta $vTcl(w,widget) $vTcl(key,x) 0 0 0
    }

    bind vTcl(b) <Shift-Up> {
        vTcl:widget_delta $vTcl(w,widget) 0 0 0 -$vTcl(key,h)
    }

    bind vTcl(b) <Shift-Down> {
        vTcl:widget_delta $vTcl(w,widget) 0 0 0 $vTcl(key,h)
    }

    bind vTcl(b) <Shift-Left> {
        vTcl:widget_delta $vTcl(w,widget) 0 0 -$vTcl(key,w) 0
    }

    bind vTcl(b) <Shift-Right> {
        vTcl:widget_delta $vTcl(w,widget) 0 0 $vTcl(key,w) 0
    }

    bind vTcl(b) <Alt-h> {
        if {$vTcl(h,exist)} {
            vTcl:destroy_handles
        } else {
            vTcl:create_handles $vTcl(w,widget)
        }
    }

    ## If we iconify or deiconify vTcl, take the top windows with us.
    bind .vTcl <Unmap> { vTcl:vtcl:unmap %W }
    bind .vTcl <Map> { vTcl:vtcl:remap %W }

    vTcl:status "Status"
}

------------------------------------------------------------




Events
------

usage:

::vTcl::notify::publish {event args}
::vTcl::notify::subscribe {event id callback}
::vTcl::notify::unsubscribe {event id}

callback will be run with the following parameters:
id args

Event list in vTcl
------------------

event			args			meaning
===============================================================================
edit_mode		none			user selects edit mode
test_mode		none			user selects test mode
geom_config_cmd 	{target mgr opt}	a toplevel is being configured,
						should refresh toplevel list
delete_widget		{target}		widget is being deleted
deleted_childsite	{target index}		childsite has been deleted,
						should refresh megawidget editor
closed_project		none			current project has being closed

